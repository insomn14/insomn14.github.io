<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Reverse Engineering on Hello World!</title>
    <link>https://insomn14.github.io/tags/reverse-engineering/</link>
    <description>Recent content in Reverse Engineering on Hello World!</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <copyright>insomn14</copyright>
    <lastBuildDate>Mon, 16 Nov 2020 05:56:50 +0700</lastBuildDate><atom:link href="https://insomn14.github.io/tags/reverse-engineering/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>CyberJawara2020 | RE *Writeups*</title>
      <link>https://insomn14.github.io/posts/cyberjawara2020_writeup/</link>
      <pubDate>Mon, 16 Nov 2020 05:56:50 +0700</pubDate>
      
      <guid>https://insomn14.github.io/posts/cyberjawara2020_writeup/</guid>
      <description>BabyBaby Description Binary ini dapat digunakan untuk permulaan belajar reverse engineering. Tips: Soal ini lebih mudah dikerjakan dengan static analysis seperti menggunakan Ghidra (gratis) atau IDA Pro (berbayar) dengan meng-generate kode C-like dari kode mesin yang ada di dalam binary. Problem Pada tantangan ini kita diberikan file binary BabyBaby, dan berikut ini adalah pseudocode dari fungsi main program tersebut.
 sym.imp.printf(0x9e4); // ps @ 0x9e4 = &amp;quot;Masukkan 3 angka:&amp;quot; sym.</description>
    </item>
    
    <item>
      <title>rgbCTF2020 | RE *Writeups*</title>
      <link>https://insomn14.github.io/posts/rgbctf2020/</link>
      <pubDate>Tue, 14 Jul 2020 16:09:06 +0700</pubDate>
      
      <guid>https://insomn14.github.io/posts/rgbctf2020/</guid>
      <description>Too Slow 50pts I&#39;ve made this flag decryptor! It&#39;s super secure, but it runs a little slow. ~ungato#3536 a.out Size: 16.46KB MD5: 0552728acb42e5f59c2ff3e8dcafc04d In this challenge we are given an a.out binary file.
❯ file a.out a.out: ELF 64-bit LSB shared object, x86-64, version 1 (SYSV), dynamically linked, interpreter /lib64/ld-linux-x86-64.so.2, BuildID[sha1]=462dfe207acdfe1da2133cac6b69b45de5169ee2, for GNU/Linux 3.2.0, not stripped ❯ ./a.out Flag Decryptor v1.0 Generating key... ^C If we execute the file, the program only runs without stopping.</description>
    </item>
    
    <item>
      <title>redpwn 2020 | RE *Writeups*</title>
      <link>https://insomn14.github.io/posts/redpwn-2020/</link>
      <pubDate>Fri, 26 Jun 2020 12:56:39 +0700</pubDate>
      
      <guid>https://insomn14.github.io/posts/redpwn-2020/</guid>
      <description>ropes 128pts Description: It&#39;s not just a string, it&#39;s a rope! File: ropes Author: NotDeGhost on this challenge we were given Mach-O binary file ropes.
❯ file ropes ropes: Mach-O 64-bit x86_64 executable, flags:&amp;lt;NOUNDEFS|DYLDLINK|TWOLEVEL|PIE&amp;gt; to solve the first challenge is not too difficult, we can use the strings command to find interesting strings that we might be able to see the flag.
❯ strings ropes ... /usr/lib/libSystem.B.dylib Give me a magic number: First part is: flag{r0pes_ar3_ Second part is: just_l0ng_str1ngs} @dyld_stub_binder @_printf .</description>
    </item>
    
    <item>
      <title>TAMUctf 2020 | RE *Writeups*</title>
      <link>https://insomn14.github.io/posts/tamuctf-2020/</link>
      <pubDate>Mon, 30 Mar 2020 06:16:12 +0700</pubDate>
      
      <guid>https://insomn14.github.io/posts/tamuctf-2020/</guid>
      <description>RUSTY_AT_REVERSING Description: A nice little reversing challenge for those who are a little rusty! File: librusty_at_reversing.so In this challenge we are given the file librusty_at_reversing.so file, as know as Shared Object file.
➜ RUSTY_AT_REVERSING file librusty_at_reversing.so librusty_at_reversing.so: ELF 64-bit LSB shared object, x86-64, version 1 (SYSV), dynamically linked, BuildID[sha1]=c4b7c1decfcaa244827e5289a0f88888665caa25, stripped Let&amp;rsquo;s just decompile the file using radare2.
[0x00001040]&amp;gt; afl 0x00001040 4 41 -&amp;gt; 34 entry0 0x00001220 13 292 sym.decrypt 0x00001100 13 288 sym.</description>
    </item>
    
    <item>
      <title>ÅngstromCTF 2020 | RE *Writeups*</title>
      <link>https://insomn14.github.io/posts/%C3%A5ngstromctf-2020/</link>
      <pubDate>Thu, 19 Mar 2020 12:59:21 +0700</pubDate>
      
      <guid>https://insomn14.github.io/posts/%C3%A5ngstromctf-2020/</guid>
      <description>Revving Up Description: Clam wrote a program for his school&#39;s cybersecurity club&#39;s first rev lecture! Can you get it to give you the flag? You can find it at /problems/2020/revving_up on the shell server, which you can access via the &amp;quot;shell&amp;quot; link at the top of the site. Hint : Try some google searches for &amp;quot;how to run a file in linux&amp;quot; or &amp;quot;bash for beginners&amp;quot;. File: revving_up Author: aplet123 In this challenge we are given the revving_up binary file.</description>
    </item>
    
    <item>
      <title>NeverLAN CTF 2020 |  RE *Writeups*</title>
      <link>https://insomn14.github.io/posts/neverlanctf-2020/</link>
      <pubDate>Fri, 14 Feb 2020 00:46:37 +0700</pubDate>
      
      <guid>https://insomn14.github.io/posts/neverlanctf-2020/</guid>
      <description>Script Kiddie 100pts Description: It looks like a script kiddie was trying to build a crypto locker. See if you can get the database back? File: encrypted_db This problem gives us the encrypted_db file, you can download it on my github. After that we can see the file format using the following command.
❯ file encrypted_db encrypted_db: ASCII text This file has a text format, let&amp;rsquo;s look at the contents of the file.</description>
    </item>
    
  </channel>
</rss>
