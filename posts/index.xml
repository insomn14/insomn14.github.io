<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
    <channel>
        <title>Posts on Hallo Dunia!</title>
        <link>https://insomn14.github.io/posts/</link>
        <description>Recent content in Posts on Hallo Dunia!</description>
        <generator>Hugo -- gohugo.io</generator>
        <language>en-us</language>
        <lastBuildDate>Thu, 19 Mar 2020 12:59:21 +0700</lastBuildDate>
        <atom:link href="https://insomn14.github.io/posts/index.xml" rel="self" type="application/rss+xml" />
        
        <item>
            <title>ÅngstromCTF 2020 | RE *Writeups*</title>
            <link>https://insomn14.github.io/posts/%C3%A5ngstromctf-2020/</link>
            <pubDate>Thu, 19 Mar 2020 12:59:21 +0700</pubDate>
            
            <guid>https://insomn14.github.io/posts/%C3%A5ngstromctf-2020/</guid>
            <description>Revving Up Description: Clam wrote a program for his school&#39;s cybersecurity club&#39;s first rev lecture! Can you get it to give you the flag? You can find it at /problems/2020/revving_up on the shell server, which you can access via the &amp;quot;shell&amp;quot; link at the top of the site. Hint : Try some google searches for &amp;quot;how to run a file in linux&amp;quot; or &amp;quot;bash for beginners&amp;quot;. File: revving_up Author: aplet123  In this challenge we are given the revving_up binary file.</description>
            <content type="html"><![CDATA[

<hr />

<h3 id="revving-up">Revving Up</h3>

<pre><code>Description:
Clam wrote a program for his school's cybersecurity club's first rev lecture! Can you get it to give you the flag?
You can find it at /problems/2020/revving_up on the shell server,
which you can access via the &quot;shell&quot; link at the top of the site.

Hint : 
Try some google searches for &quot;how to run a file in linux&quot; or &quot;bash for beginners&quot;.

File:
revving_up

Author: 
aplet123
</code></pre>

<p>In this challenge we are given the <em>revving_up</em> binary file.</p>

<pre><code>❯ file revving_up
revving_up: ELF 64-bit LSB executable, x86-64, version 1 (SYSV), dynamically linked, interpreter /lib64/ld-linux-x86-64.so.2, for GNU/Linux 3.2.0, BuildID[sha1]=e9a5285cc0d71320a73e27870a35a98efbe01a87, not stripped

❯ ./revving_up
Congratulations on running the binary!
Now there are a few more things to tend to.
Please type &quot;give flag&quot; (without the quotes).
give flag
Good job!
Now run the program with a command line argument of &quot;banana&quot; and you'll be done!
❯ 
</code></pre>

<p>When we run the program we are asked to enter the input &lsquo;<em>give flag</em>&rsquo;. But in the next instruction we are asked to add the &lsquo;<em>banana</em>&rsquo; argument when executing the program. The following is the pseudocode, I use <em>radare2</em> with <em>r2ghidra-dec</em>.</p>

<pre><code>iVar2 = sym.imp.strcmp(&amp;s1, &quot;give flag&quot;);
    if (iVar2 == 0) {
        sym.imp.puts(&quot;Good job!&quot;);
        if ((int32_t)argc &lt; 2) {
            sym.imp.puts(&quot;Now run the program with a command line argument of \&quot;banana\&quot; and you\'ll be done!&quot;);
            uVar4 = 1;
        } else {
            iVar2 = sym.imp.strcmp(argv[1], &quot;banana&quot;);
            if (iVar2 == 0) {
                sym.imp.puts(&quot;Well I think it\'s about time you got the flag!&quot;);
                sym.print_flag();
                uVar4 = 0;
            } else {
                sym.imp.printf(&quot;You provided \&quot;%s\&quot;, not \&quot;banana\&quot;. Please try again.\n&quot;, argv[1]);
                uVar4 = 1;
            }
        }
</code></pre>

<p>As you can see, on the iVar2 variable there is <code>strcmp (argv [1], 'banana');</code> As we mentioned earlier we need to add an argument to the argument when executing the program. Now run the program on the given server ssh.</p>

<pre><code>team5385@actf:/problems/2020/revving_up$ ./revving_up banana
Congratulations on running the binary!
Now there are a few more things to tend to.
Please type &quot;give flag&quot; (without the quotes).
give flag
Good job!
Well I think it's about time you got the flag!
actf{g3tting_4_h4ng_0f_l1nux_4nd_b4sh}
</code></pre>

<p>FLAG : <code>actf{g3tting_4_h4ng_0f_l1nux_4nd_b4sh}</code></p>

<hr />

<h2 id="windows-of-opportunity">Windows of Opportunity</h2>

<pre><code>Description:
Clam's a windows elitist and he just can't stand seeing all of these linux challenges!
So, he decided to step in and create his own rev challenge with the &quot;superior&quot; operating system.

Hint : 
You can probably solve it just by looking at the disassembly.

File:
windows_of_opportunity.exe

Author: 
aplet123
</code></pre>

<p>In the following challenge we are given the file <em>windows_of_opportunity.exe</em>.</p>

<pre><code>❯ file windows_of_opportunity.exe
windows_of_opportunity.exe: PE32+ executable (console) x86-64, for MS Windows

❯ wine windows_of_opportunity.exe
Welcome to the superior rev challenge compiled for the superior operating system!
What's the superior flag for this superior rev challenge?
give flag
Your flag is way too different from my superior flag!
</code></pre>

<p>As <strong>Hint</strong> said, let&rsquo;s look at the <em>disassembly</em> code. Following is the <em>disassembly</em> code of <em>radare2</em>.</p>

<pre><code>...
│           0x00401603      ffd0           call rax
│           0x00401605      4989c0         mov r8, rax
│           0x00401608      ba80000000     mov edx, 0x80               ; 128 ; FILE *stream
│           0x0040160d      488d0d8c1a00.  lea rcx, [0x004030a0]       ; &quot;actf{ok4y_m4yb3_linux_is_s7ill_b3tt3r}&quot;
│           0x00401614      e8c7160000     call sym.fgets              ; char *fgets(char *s, int size, FILE *stream)
│           0x00401619      488d0d801a00.  lea rcx, [0x004030a0]       ; &quot;actf{ok4y_m4yb3_linux_is_s7ill_b3tt3r}&quot;
│           0x00401620      e87b160000     call sym.strlen             ; size_t strlen(const char *s)
│           0x00401625      83e801         sub eax, 1
│           0x00401628      8945f8         mov dword [var_8h], eax
│           0x0040162b      8b45f8         mov eax, dword [var_8h]
│           0x0040162e      4863d0         movsxd rdx, eax
│           0x00401631      488d05681a00.  lea rax, [0x004030a0]       ; &quot;actf{ok4y_m4yb3_linux_is_s7ill_b3tt3r}&quot;
│           0x00401638      c6040200       mov byte [rdx + rax], 0
│           0x0040163c      837df826       cmp dword [var_8h], 0x26
│       ┌─&lt; 0x00401640      7416           je 0x401658
│       │   0x00401642      488d0d4f2a00.  lea rcx, str.Your_flag_is_way_too_different_from_my_superior_flag ; 0x404098 ; &quot;Your flag is way too different from my superior flag!&quot;
│       │   0x00401649      e862160000     call sym.puts               ; int puts(const char *s)
│       │   0x0040164e      b901000000     mov ecx, 1
│       │   0x00401653      e890160000     call sym.exit
│       │   ; CODE XREF from sym.main @ 0x401640
...

[0x00401500]&gt; px 0x26 @ 0x004030a0
- offset -   0 1  2 3  4 5  6 7  8 9  A B  C D  E F  0123456789ABCDEF
0x004030a0  6163 7466 7b6f 6b34 795f 6d34 7962 335f  actf{ok4y_m4yb3_
0x004030b0  6c69 6e75 785f 6973 5f73 3769 6c6c 5f62  linux_is_s7ill_b
0x004030c0  3374 7433 727d                           3tt3r}
</code></pre>

<p>We can immediately see the flag very clearly. The flag is located at memory address <em>0x004030a0</em>.</p>

<pre><code>❯ wine windows_of_opportunity.exe
Welcome to the superior rev challenge compiled for the superior operating system!
What's the superior flag for this superior rev challenge?
actf{ok4y_m4yb3_linux_is_s7ill_b3tt3r}
Oh wow a fellow windows user!
</code></pre>

<p>FLAG : <code>actf{ok4y_m4yb3_linux_is_s7ill_b3tt3r}</code></p>

<hr />

<h2 id="taking-off">Taking Off</h2>

<pre><code>Description:
So you started revving up, but is it enough to take off? Find the problem in /problems/2020/taking_off/ in the shell server.

Hint : 
You should look into tools like GHIDRA, *gdb*, and *objdump*.

File:
taking_off

Author: 
aplet123
</code></pre>

<p>In the following challenge we are given the binary <em>taking_off file</em>.</p>

<pre><code>❯ file taking_off
taking_off: ELF 64-bit LSB executable, x86-64, version 1 (SYSV), dynamically linked, interpreter /lib64/ld-linux-x86-64.so.2, for GNU/Linux 3.2.0, BuildID[sha1]=fc4deaf2c2da6fdaf4cb7bc1e83d4f1372720832, not stripped

❯ ./taking_off
So you figured out how to provide input and command line arguments.
But can you figure out what input to provide?
Make sure you have the correct amount of command line arguments!
...
...
❯ ./taking_off aa bb cc dd
So you figured out how to provide input and command line arguments.
But can you figure out what input to provide?
Don't try to guess the arguments, it won't work.

</code></pre>

<p>Almost the same as the previous challenge, we are asked to execute the program with arguments. As you can see after we add as many as four arguments the program displays different outputs. Let&rsquo;s look at the pseudocode.</p>

<pre><code>[0x00400790]&gt; pdg@main
...
	if (argc == 5) {
		sym.string_to_int(argv[1], (int64_t)&amp;var_ach);
		sym.string_to_int(argv[2], (int64_t)&amp;var_ach + 4);
		sym.string_to_int(argv[3], (int64_t)&amp;var_a4h);
...

[0x00400790]&gt; pdg@sym.string_to_int

void sym.string_to_int(char *arg1, int64_t arg2)
{
    int64_t var_10h;
    char *s;
    
    sym.imp.sscanf(arg1, 0x400c8d, arg2);
    return;
}
</code></pre>

<p>As we can see there is a function <code>string_to_int (char * arg1, int64_t arg2)</code>, where it transforms our argument into an integer.</p>

<pre><code>[0x00400790]&gt; pdg@main
...
    iVar2 = sym.is_invalid((uint64_t)(uint32_t)var_ach);	
    if (iVar2 == 0) {
        iVar2 = sym.is_invalid((uint64_t)var_ach._4_4_);
        if (iVar2 == 0) {
            iVar2 = sym.is_invalid((uint64_t)var_a4h);
            if (iVar2 == 0) {
                if (var_a4h + var_ach._4_4_ * 100 + (uint32_t)var_ach * 10 == 0x3a4) {
                    iVar2 = sym.imp.strcmp(argv[4], &quot;chicken&quot;);
...
[0x00400790]&gt; pdg@sym.is_invalid

undefined8 sym.is_invalid(undefined8 arg1)
{
    undefined8 uVar1;
    undefined8 var_4h;
    
    if (((int32_t)arg1 &lt; 0) || (9 &lt; (int32_t)arg1)) {
        uVar1 = 1;
    } else {
        uVar1 = 0;
    }
    return uVar1;
}
</code></pre>

<p>Next after changing our argument there is also the sym.is_invalid function (undefined8 arg1). The function aims to check whether our argument is smaller than 0 or greater than 9 then returns the value of uVar1.</p>

<pre><code>...
    if (var_a4h + var_ach._4_4_ * 100 + (uint32_t)var_ach * 10 == 0x3a4) {
        iVar2 = sym.imp.strcmp(argv[4], &quot;chicken&quot;);
        if (iVar2 == 0) {
            sym.imp.puts(&quot;Well, you found the arguments, but what\'s the password?&quot;);
...
</code></pre>

<p>Next there is the condition  <code>if (var_a4h + var_ach._4_4_ * 100 + (uint32_t)var_ach * 10 == 0x3a4)</code>. our three arguments after calculated the result must be equal to 932. And in the next line our fourth argument is chicken.</p>

<p>Here is a simple code to get to our three arguments.</p>

<pre><code>&gt;&gt;&gt;  for i in range(0, 10):
...		for j in range(0, 10):
...		     for k in range(0, 10):
...			  if 100 * j + 10 * i + k == 932:
...			       print (i, j ,k)
...			       break
... 
3 9 2
</code></pre>

<p>So our argument is <code>3 9 2 chicken</code>. Let&rsquo;s look at the following lines of code.</p>

<pre><code>...
    sym.imp.puts(&quot;Well, you found the arguments, but what\'s the password?&quot;);
    sym.imp.fgets(&amp;s, 0x80, _reloc.stdin);
    var_98h = (char *)sym.imp.strchr(&amp;s, 10);
    if (var_98h != (char *)0x0) {
        *var_98h = '\0';
    }
    var_9ch = sym.imp.strlen(&amp;s);
    var_a0h = 0;
    while (var_a0h &lt;= var_9ch) {
        if ((*(uint8_t *)((int64_t)&amp;s + (int64_t)var_a0h) ^ 0x2a) != &quot;ZFOKYO\nMC\\O\nLFKM*&quot;[var_a0h]) {
            sym.imp.puts(&quot;I\'m sure it\'s just a typo. Try again.&quot;);
            uVar3 = 1;
            goto code_r0x00400bc7;
        }
        var_a0h = var_a0h + 1;
    }
    sym.imp.puts(&quot;Good job! You\'re ready to move on to bigger and badder rev!&quot;);
    sym.print_flag();
    uVar3 = 0;
    goto code_r0x00400bc7;
...
</code></pre>

<p>In this section we are asked to enter a password, each character will be xor with 0x2a and the result must be the same as <code>ZFOKYO\nMC\\O\nLFKM*</code>. Let&rsquo;s make a simple code to guess the password.</p>

<pre><code>&gt;&gt;&gt; from string import printable
&gt;&gt;&gt; password = ''
&gt;&gt;&gt; res = &quot;ZFOKYO\nMC\\O\nLFKM*&quot;
&gt;&gt;&gt; for i in res:
...     for ch in printable:
...             if chr(ord(ch)^0x2a) == i:
...                     password += ch
... 
&gt;&gt;&gt; password
'please give flag'
</code></pre>

<p>Now that we know the password, it&rsquo;s time to prove. Let&rsquo;s run the program from the ssh server.</p>

<pre><code>team5385@actf:~$ cd /problems/2020/taking_off/
team5385@actf:/problems/2020/taking_off$ ./taking_off 3 9 2 chicken
So you figured out how to provide input and command line arguments.
But can you figure out what input to provide?
Well, you found the arguments, but what's the password?
please give flag
Good job! You're ready to move on to bigger and badder rev!
actf{th3y_gr0w_up_s0_f4st}
team5385@actf:/problems/2020/taking_off$ 
</code></pre>

<p>FLAG : <code>actf{th3y_gr0w_up_s0_f4st}</code></p>

<hr />

<h2 id="masochistic-sudoku">Masochistic Sudoku</h2>

<pre><code>Description:
Clam's tired of the ease and boredom of traditional sudoku. Having just one solution that can be determined via a simple online sudoku solver isn't good enough for him.
So, he made masochistic sudoku! Since there are no hints, there are around 6*10^21 possible solutions but only one is actually accepted!
Find it on the shell server at /problems/2020/masochistic_sudoku/.

File:
masochistic_sudoku

Author: 
aplet123
</code></pre>

<p>In the following problem we are given the masochistic_sudoku binary file.</p>

<pre><code>❯ file masochistic_sudoku
masochistic_sudoku: ELF 64-bit LSB executable, x86-64, version 1 (SYSV), dynamically linked, interpreter /lib64/ld-linux-x86-64.so.2, for GNU/Linux 3.2.0, BuildID[sha1]=d812dc3b76f3241ad03e6018d45d1d18665ce1dd, not stripped
❯ ./masochistic_sudoku
+---+---+---+---+---+---+---+---+---+
|   |   |   |   |   |   |   |   |   |
+---+---+---+---+---+---+---+---+---+
|   |   |   |   |   |   |   |   |   |
+---+---+---+---+---+---+---+---+---+
|   |   |   |   |   |   |   |   |   |
+---+---+---+---+---+---+---+---+---+
|   |   |   |   |   |   |   |   |   |
+---+---+---+---+---+---+---+---+---+
|   |   |   |   |   |   |   |   |   |
+---+---+---+---+---+---+---+---+---+
|   |   |   |   |   |   |   |   |   |
+---+---+---+---+---+---+---+---+---+
|   |   |   |   |   |   |   |   |   |
+---+---+---+---+---+---+---+---+---+
|   |   |   |   |   |   |   |   |   |
+---+---+---+---+---+---+---+---+---+
|   |   |   |   |   |   |   |   |   |
+---+---+---+---+---+---+---+---+---+
</code></pre>

<p>This challenge is very interesting, so I need IDA to debug. When after opening it with IDA there are very many instructions, but there is a function that interests me, the <em>check_flag</em> function.</p>

<p><img src="/img/Screenshot/ÅngstromCTF 2020/Screenshot from 2020-03-19 22-49-53.png" alt="check_flag" title="check_flag" /></p>

<p>Following is the pseudocode of the <em>check_flag</em> function.</p>

<pre><code>...
...
  v0 = gen_value(0LL, 0LL, (unsigned int)board[0]);
  assert(v0 == 1754831936);
  v1 = gen_value(0LL, 4LL, (unsigned int)dword_603170);
  assert(v1 == 1322670498);
  v2 = gen_value(0LL, 6LL, (unsigned int)dword_603178);
  assert(v2 == 2075469024);
  v3 = gen_value(0LL, 7LL, (unsigned int)dword_60317C);
  assert(v3 == 1924349448);
  v4 = gen_value(1LL, 2LL, (unsigned int)dword_60318C);
  assert(v4 == 1737338032);
  v5 = gen_value(1LL, 4LL, (unsigned int)dword_603194);
  assert(v5 == 382094521);
  v6 = gen_value(1LL, 5LL, (unsigned int)dword_603198);
  assert(v6 == 2003484635);
  v7 = gen_value(1LL, 6LL, (unsigned int)dword_60319C);
  assert(v7 == 1224890436);
  v8 = gen_value(2LL, 4LL, (unsigned int)dword_6031B8);
  assert(v8 == 613863398);
  v9 = gen_value(2LL, 5LL, (unsigned int)dword_6031BC);
  assert(v9 == 2131248558);
  v10 = gen_value(2LL, 7LL, (unsigned int)dword_6031C4);
  assert(v10 == 1855404474);
...
...
</code></pre>

<pre><code>int __fastcall gen_value(int a1, int a2, int a3)
{
  srand(13 * ((100 * a1 + 10 * a2 + a3) ^ 0x2A) % 10067);
  return rand();
}
</code></pre>

<p>And there is also the gen_value function. To understand what happens to the <em>check_flag</em> function, let&rsquo;s place breakpoints in the <em>check_flag</em> function and press the F9 key until we hit breakpoint.</p>

<p><img src="/img/Screenshot/ÅngstromCTF 2020/Screenshot from 2020-03-19 22-52-06.png" alt="break_check_flag" title="break_check_flag" /></p>

<p>Following is the technique that I use to find out the value of each box that will go through the <em>gen_value</em> function:</p>

<ol>
<li><p>Fill every 6 squares with numbers 1 through 9</p></li>

<li><p>View changes that occur in the .bss stack</p></li>

<li><p>Repeat the first and second steps, until the last 6 squares</p></li>
</ol>

<p><img src="/img/Screenshot/ÅngstromCTF 2020/Color Screenshot from 2020-03-19 23-05-54.jpg" alt="sudoku" title="sudoku" /></p>

<p><img src="/img/Screenshot/ÅngstromCTF 2020/Screenshot from 2020-03-19 23-11-25.png" alt="Sudoku" title="Sudoku" /></p>

<p>Following are my observations, the numbers represent that the values ​​contained in the box will be used as parameters in the <em>gen_value</em> function.</p>

<p><img src="/img/Screenshot/ÅngstromCTF 2020/Screenshot from 2020-03-19 23-54-37.png" alt="Sudoku" title="Sudoku" /></p>

<p>Let&rsquo;s create a script to find a suitable value to match in each box that we find.</p>

<pre><code>from ctypes import *

libc = cdll.LoadLibrary(&quot;/lib/x86_64-linux-gnu/libdl.so.2&quot;)

def gen_value(a1,a2,parm):
    for num in range(1,10):
        libc.srand((13 * ((100 * a1 + 10 * a2 + num) ^ 42) % 10067))
        res = libc.rand()
        if res == parm:
            return num
    return None

def main():
    val = [1754831936, 1322670498, 2075469024, 1924349448, 1737338032, 382094521, 2003484635, 1224890436, 613863398, 2131248558, 1855404474, 203716718, 2132752585, 54194304, 548400147, 2040844259, 348846481, 712829567, 198917626, 1999818593, 47214827, 117615071, 1948118465, 345110140, 2113220118, 443730372, 2136198019, 1427855150, 323649682, 1443247958]
    
    guess = [0 for _ in range(30)]
    guess[0] = gen_value(0,0,val[0])
    guess[1] = gen_value(0,4,val[1])
    guess[2] = gen_value(0,6,val[2])
    guess[3] = gen_value(0,7,val[3])
    guess[4] = gen_value(1,2,val[4])
    guess[5] = gen_value(1,4,val[5])
    guess[6] = gen_value(1,5,val[6])
    guess[7] = gen_value(1,6,val[7])
    guess[8] = gen_value(2,4,val[8])
    guess[9] = gen_value(2,5,val[9])
    guess[10] = gen_value(2,7,val[10])
    guess[11] = gen_value(3,0,val[11])
    guess[12] = gen_value(3,2,val[12])
    guess[13] = gen_value(4,0,val[13])
    guess[14] = gen_value(4,1,val[14])
    guess[15] = gen_value(4,7,val[15])
    guess[16] = gen_value(4,8,val[16])
    guess[17] = gen_value(5,6,val[17])
    guess[18] = gen_value(5,8,val[18])
    guess[19] = gen_value(6,1,val[19])
    guess[20] = gen_value(6,3,val[20])
    guess[21] = gen_value(6,4,val[21])
    guess[22] = gen_value(7,2,val[22])
    guess[23] = gen_value(7,3,val[23])
    guess[24] = gen_value(7,4,val[24])
    guess[25] = gen_value(7,6,val[25])
    guess[26] = gen_value(8,1,val[26])
    guess[27] = gen_value(8,2,val[27])
    guess[28] = gen_value(8,4,val[28])
    guess[29] = gen_value(8,8,val[29])
    for i,j in enumerate(guess):
        print(f'No.{i} Guess: {j} --&gt; Val: {val[i]}')
      
if __name__ == '__main__':
    main()
</code></pre>

<p>Output :</p>

<pre><code>Guess: 1 --&gt; Val: 1754831936    // (1,1)
Guess: 6 --&gt; Val: 1322670498    // (2,2)
Guess: 8 --&gt; Val: 2075469024    // (3,1)
Guess: 5 --&gt; Val: 1924349448    // (3,2)
Guess: 5 --&gt; Val: 1737338032    // (1,5)
Guess: 8 --&gt; Val: 382094521     // (3,4)
Guess: 3 --&gt; Val: 2003484635    // (2,6)
Guess: 1 --&gt; Val: 1224890436    // (3,4)
Guess: 1 --&gt; Val: 613863398     // (2,8)
Guess: 2 --&gt; Val: 2131248558    // (2,9)
Guess: 9 --&gt; Val: 1855404474    // (3,8)
Guess: 9 --&gt; Val: 203716718     // (4,1)
Guess: 7 --&gt; Val: 2132752585    // (4,3)
Guess: 5 --&gt; Val: 54194304      // (4,4)
Guess: 3 --&gt; Val: 548400147     // (4,5)
Guess: 8 --&gt; Val: 2040844259    // (6,5)
Guess: 9 --&gt; Val: 348846481     // (6,6)
Guess: 3 --&gt; Val: 712829567     // (6,7)
Guess: 5 --&gt; Val: 198917626     // (6,9)
Guess: 4 --&gt; Val: 1999818593    // (7,2)
Guess: 6 --&gt; Val: 47214827      // (8,1)
Guess: 2 --&gt; Val: 117615071     // (8,2)
Guess: 6 --&gt; Val: 1948118465    // (7,6)
Guess: 1 --&gt; Val: 345110140     // (8,4)
Guess: 9 --&gt; Val: 2113220118    // (8,5)
Guess: 7 --&gt; Val: 443730372     // (9,4)
Guess: 2 --&gt; Val: 2136198019    // (7,8)
Guess: 1 --&gt; Val: 1427855150    // (7,9)
Guess: 3 --&gt; Val: 323649682     // (8,8)
Guess: 4 --&gt; Val: 1443247958    // (9,9)
</code></pre>

<p>After we get the value, then enter each value into the box that we found earlier.</p>

<p><img src="/img/Screenshot/ÅngstromCTF 2020/Screenshot from 2020-03-20 00-16-52.png" alt="Found_value" title="Found_value" /></p>

<p>Now is the time to fill in the empty boxes. There are three ways to solve it.</p>

<ol>
<li><p><a href="https://ericpony.github.io/z3py-tutorial/guide-examples.htm">Using z3-Solver.</a></p></li>

<li><p><a href="https://anysudokusolver.com/">Using Sudoku Solver.</a></p></li>

<li><p><a href="https://www.youtube.com/watch?v=dQw4w9WgXcQ">Using our brain.</a></p></li>
</ol>

<p>I prefer to use number 2.</p>

<p><img src="/img/Screenshot/ÅngstromCTF 2020/Screenshot from 2020-03-20 00-31-50.png" alt="final" title="final" /></p>

<p>Then press q.</p>

<p><img src="/img/Screenshot/ÅngstromCTF 2020/Screenshot from 2020-03-20 00-32-28.png" alt="final" title="final" /></p>

<p>Now we prove it on ssh server.</p>

<pre><code>team5385@actf:~$ cd /problems/2020/masochistic_sudoku/
team5385@actf:/problems/2020/masochistic_sudoku$ ./masochistic_sudoku 
Wow you're good at sudoku!
actf{sud0ku_but_f0r_pe0ple_wh0_h4te_th3mselves}
team5385@actf:/problems/2020/masochistic_sudoku$ 
</code></pre>

<p>FLAG : <code>actf{sud0ku_but_f0r_pe0ple_wh0_h4te_th3mselves}</code></p>
]]></content>
        </item>
        
        <item>
            <title>NeverLAN CTF 2020 |  RE *Writeups*</title>
            <link>https://insomn14.github.io/posts/neverlanctf-2020/</link>
            <pubDate>Fri, 14 Feb 2020 00:46:37 +0700</pubDate>
            
            <guid>https://insomn14.github.io/posts/neverlanctf-2020/</guid>
            <description>Script Kiddie 100pts Description: It looks like a script kiddie was trying to build a crypto locker. See if you can get the database back? File: encrypted_db  This problem gives us the encrypted_db file, you can download it on my github. After that we can see the file format using the following command.
❯ file encrypted_db encrypted_db: ASCII text  This file has a text format, let&amp;rsquo;s look at the contents of the file.</description>
            <content type="html"><![CDATA[

<hr />

<h3 id="script-kiddie-100pts">Script Kiddie 100pts</h3>

<pre><code>Description:
It looks like a script kiddie was trying to build a crypto locker.
See if you can get the database back?
File:
encrypted_db
</code></pre>

<p>This problem gives us the <em><a href="https://github.com/insomn14/CTFtime2020/tree/master/NeverLAN-CTF/Re/ScriptKiddie">encrypted_db</a></em> file, you can download it on my github. After that we can see the file format using the following command.</p>

<pre><code>❯ file encrypted_db
encrypted_db: ASCII text
</code></pre>

<p>This file has a text format, let&rsquo;s look at the contents of the file.</p>

<pre><code>❯ cat encrypted_db
..... 
764c6d4e7662534973496d466b5a484a6c63334d694f6e7369633352795a
5756300a496a6f69516d396e61584e705932676754576c7a63326c766269
4973496e4e316158526c496a6f69515842304c6941344e4441694c434a6a
61585235496a6f69536d4635626d566962334a760a6457646f4969776965
6d6c775932396b5a534936496a63784e6a4d33496977695a325676496a70
37496d786864434936496a4d7a4c6a45794d6a4d694c434a73626d63694f
.....
</code></pre>

<p>After opening the file I thought that it had been encoded into the hex form. I use python2 interactive to decode the contents of the file.</p>

<pre><code>&gt;&gt;&gt; enc = open('encrypted_db', 'r').read().replace('\n','')
&gt;&gt;&gt; dec = enc.decode('hex')
&gt;&gt;&gt; dec
....
....
ZGVyIC0gSmFjb2JpIiwiY2F0\nY2hQaHJhc2UiOiJDdXN0b21pemFibGUgb3B0aW1pemluZyBpbnRlcmZhY2UiLCJicyI6ImUtYnVz\naW5lc3Mgc3ludGhlc2l6ZSBzY2hlbWFzIn19fQo=\n'

</code></pre>

<p>As you can see, we get lots of random characters. If we look closer to the last line, there is the character <em>&rsquo;=&rsquo;</em> so I&rsquo;m guessing maybe this is base64. Let&rsquo;s make a simple code to solve this challange.</p>

<pre><code>❯ nl solver.py
     1	import re
     2	from base64 import b64decode
       
     3	enc = open('encrypted_db', 'r').read().replace('\n', '')
     4	dec = b64decode(enc.decode('hex'))
     5	print re.findall(r'flag[^.]*}', dec)
     
❯ python solver.py
['flag{ENC0D1NG_D4TA_1S_N0T_ENCRY7I0N}']

</code></pre>

<p>And we got the flag.</p>

<p><code>flag{ENC0D1NG_D4TA_1S_N0T_ENCRY7I0N}</code></p>

<hr />

<h3 id="adobe-payroll-100pts">Adobe Payroll 100pts</h3>

<pre><code>Description:
We've forgotten the password to our payroll machine. Can you extract it?
File:
Adobe_Payroll.7z
</code></pre>

<p>Almost the same as the previous challange, in this problem we were given <em><a href="https://github.com/insomn14/CTFtime2020/tree/master/NeverLAN-CTF/Re/AdobePlayroll">Adobe_Payroll.7z</a></em>,
you can download the file on my github. Let&rsquo;s extract the <em>7z</em> file, in the <em>7z</em> file there are two files, including the  <em>executable</em> file and <em>description.md</em>.</p>

<pre><code>❯ file Adobe_Employee_Payroll.exe
Adobe_Employee_Payroll.exe: PE32 executable (GUI) Intel 80386 Mono/.Net assembly, for MS Windows

❯ cat description.md
# Adobe Payroll

- Category: I promise it's not malware 😈
- Points: 100

## Description

This is a .NET file. Take a look at dotPeek.
</code></pre>

<p>So basically, I think this program uses C# language. So you can use <a href="https://www.google.com/url?sa=t&amp;rct=j&amp;q=&amp;esrc=s&amp;source=web&amp;cd=5&amp;cad=rja&amp;uact=8&amp;ved=2ahUKEwi7o_PPwM_nAhX4yDgGHYAjCVAQFjAEegQIDBAG&amp;url=https%3A%2F%2Fwww.jetbrains.com%2Fdecompiler%2F&amp;usg=AOvVaw1pcfEbCKhdDrtRMXeXhm3k">dotPeek</a>   to decompile. But in this case I use IDA to do static analysis.
<img src="/img/Screenshot/neverlanctf2020/Re/3.PNG" alt="AdobePayroll" />
Select <code>Microsoft.Net assembly [pe.ldw]</code> then click Ok.
<img src="/img/Screenshot/neverlanctf2020/Re/4.PNG" alt="AdobePayroll" />
In the <em>Functions window</em> there is a function of <code>employee_payroll_checkUsername</code> &amp; <code>employee_payroll_chackPassword</code>, That function I think is used to compare a string.
<img src="/img/Screenshot/neverlanctf2020/Re/5.PNG" alt="AdobePayroll" />
<img src="/img/Screenshot/neverlanctf2020/Re/6.PNG" alt="AdobePayroll" />
 Let&rsquo;s try using the <code>admin</code> as the <em>Username</em> and <code>bmV2ZXJfZ29ubmFfZ212ZV95b3VfdXAh</code> as the <em>Password</em>.
<img src="/img/Screenshot/neverlanctf2020/Re/flag.PNG" alt="AdobePayroll" />
And boom!.. we got the flag.</p>

<p><code>flag{.net_is_pretty_eassy_to_decompile}</code></p>

<hr />

<h3 id="reverse-engineer-300pts">Reverse Engineer 300pts</h3>

<pre><code>Description:
This program seems to get stuck while running...
Can you get it to continue past the broken function?
File:
reverseng
</code></pre>

<p>In this case we are given a binary <a href="https://github.com/insomn14/CTFtime2020/tree/master/NeverLAN-CTF/Re/Reverse%20Engineer">reverseng</a>  file, once again you can check on my github to download the binary file ;). when we try to run the program we will get the SEGV message.</p>

<pre><code>❯ ./revseng
[1]    12675 segmentation fault (core dumped)  ./revseng

❯ file revseng
revseng: ELF 64-bit LSB pie executable, x86-64, version 1 (SYSV), dynamically linked, interpreter /lib64/ld-linux-x86-64.so.2, BuildID[sha1]=89d54c514d9f6bec697e52edfee4a495266b3577, for GNU/Linux 3.2.0, with debug_info, not stripped
</code></pre>

<p>So without further ado let&rsquo;s get started analyzing it using IDA. There is a function called <code>void __cdecl print ()</code> and <code>malloc ()</code> function that allocates memory of 0x15 or 21byte to <code>flg</code>, And each byte contains a decimal value. So this is the Pseudocode of the function, after we convert each index value of <code>flg</code> to character.</p>

<p><img src="/img/Screenshot/neverlanctf2020/Re/pseudocode.png" alt="revseng" /></p>

<p>And we get the flag again.</p>

<p><code>flag{w3con7r0lth3b1nari3s}</code></p>
]]></content>
        </item>
        
    </channel>
</rss>
